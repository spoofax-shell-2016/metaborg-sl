module trans/semantics/functions

imports
  trans/semantics/values

/*
* Function definitions
*/
signature
  arrows
    List(FunDef) -load-> U
    FunDef -load-> U
    FunDef -fun2val-> V

rules

  fs : List(FunDef) -load-> U()
  where
    case fs of {
      [f | fs'] =>
        f -load-> _;
        fs' -load-> _
      [] =>
    }.
    
//  [] : List(FunDef) -load-> U().
//  
//  [f | fs] : List(FunDef) -load-> U()
//  where
//    f -load-> _;
//    fs -load-> _.

  FunDef(name, params, body) :: C C(E), E E' -load-> U() :: C C({entry, E}), E {entry, E'}
  where
    {name |--> FunV(name, params, __Block2Stmt__(body))} => entry.

  FunDef(name, params, body) -fun2val-> FunV(name, params, __Block2Stmt__(body)).

rules

  FunCall(name, args) --> v
  where
    lookup(name) --> FunV(_, params, body);
    args --> vargs;
    invoke(vargs, params, body) --> v.

  FunCall(name, args) --> v
  where
    lookup(name) --> ClosV(_, params, body, E);
    args --> vargs;
    invoke(vargs, params, body) :: C C(E), E --> v.

/*
* Function calls
*/
signature
  constructors
    invoke: List(V) * List(String) * Stmt --> V
    bind: List(V) * List(String) --> E
  
  sorts
    ReturnHandler
  
  constructors
    doReturn : V -> ReturnHandler // will throw a ReturnException with the value and the semantic components
    onReturn : Stmt -> ReturnHandler // will catch a ReturnException with the value and the semantic components
  
  arrows
    ReturnHandler --> V // natively implemented
  
  arrows
    List(Expr) --> List(V)

  constructors
    bind_aux : List(V) * List(String) * E --> E
    
rules  

  invoke(vseq, parseq, stmt) :: E --> v :: E
  where
    bind(vseq, parseq) :: E --> E' :: E _;
    onReturn(stmt) :: E' --> v :: E _.
  
  es : List(Expr) --> vs
  where
    case es of {
      [e | es'] =>
        e --> v;
        es' --> vs';
        [v | vs'] => vs
      [] =>
        [] => vs
    }.
  
//  [] : List(Expr) --> [].
//  
//  [e | es] : List(Expr) --> [v | vs]
//  where
//    e --> v;
//    es --> vs.
  
  
  bind_aux(vs, params, Ecall) --> Ecall'
  where
    case vs of {
      [v | vs'] =>
        params => [p | ps'];
        bind_aux(vs', ps', {p |--> v, Ecall}) --> Ecall'
    otherwise =>
      Ecall => Ecall'
    }. 
    
  bind(vs, params) :: C c@C(Etop), E --> Ecall :: C c, E
  where
    bind_aux(vs, params, Etop) --> Ecall.
    
  
//  bind(vs, params) :: E, C --> Ecall :: E', C'
//  where
//    vs => []
//    < {
//      params => [];
//      C => C(Etop);
//      Etop => Ecall;
//      E => E';
//      C => C'
//    } + {
//      vs => [v | vs'];
//      params => [p | ps];
//      bind(vs', ps) :: E, C --> Ebind :: E', C';
//      {p |--> v, Ebind} => Ecall
//    }.
  
//  bind([], []) :: C c@C(E) --> E :: C c. 
//  
//  bind([v | vs], [p | ps]) --> {p |--> v, E}
//  where
//    bind(vs, ps) --> E.
  
  ReturnVoid() --> U()
  where
    doReturn(NullV()) --> _.

  Return(v) --> U()
  where
    doReturn(v) --> _.



