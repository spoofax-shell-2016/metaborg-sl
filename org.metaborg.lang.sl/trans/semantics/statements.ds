module trans/semantics/statements

imports
  trans/semantics/desugared-sig
  trans/semantics/values

rules
  
  While(e, b) --> U()
   where
     onBreak(onContinue(loop2stmt(loopSpec(expandBoolV(e), b)))) --> _

signature
  sorts
    Loop

  constructors
    loopSpec: BoolVExpand * Stmt -> Loop
    loop2stmt : Loop -> Stmt

  arrows
    Loop :: E, GE --> U :: E, GE // natively implemented
  
  sorts
    BoolVExpand
  
  constructors
    expandBoolV : Expr -> BoolVExpand
  
  arrows
    BoolVExpand --> Bool

rules

  loop2stmt(l) --> l

  expandBoolV(e) --> bv
  where
    e --> BoolV(bv)
  
  l@loopSpec(boolexp, stmt) --> U()
  where
    boolexp --> bv;
    case bv of {
      true =>
        stmt --> _;
        l --> _
      otherwise =>
    }

signature
  sorts
    BreakHandler
    ContinueHandler
    
  constructors
    doBreak : BreakHandler // will throw a BreakException with the value and the semantic components 
    onBreak : Stmt -> Stmt // will handle a BreakException with the value and the semantic components
    doContinue : ContinueHandler // will throw a ContinueException with the value and the semantic components
    onContinue : Stmt -> Stmt // will handle a ContinueException with the value and the semantic components  

   arrows
     BreakHandler :: E, GE --> U :: E, GE // natively implemented
     ContinueHandler :: E, GE --> U :: E, GE // natively implemented

rules
  
  Continue() --> doContinue()

  Break() --> doBreak()

rules
  
  IfThenElse(e, Block(s1), Block(s2)) --> U()
  where
    e --> BoolV(bv);
    case bv of {
      true =>
        s1 --> _
      false =>
        s2 --> _
    }

  Stmt(_ : V) --> U()
  
  __Block2Stmt__(Block(ss)) --> ss
  
signature
  arrows
    List(Stmt) --> U
  arrows
    stmts_aux(List(Stmt), U) --> U

rules

  stmts_aux(stmts, u) --> u
  where
    case stmts of {
      [s | stmts'] =>
        s --> _;
        stmts_aux(stmts', u) --> _
      otherwise =>
    }

  stmts : List(Stmt) --> u
  where
    stmts_aux(stmts, U()) --> u

