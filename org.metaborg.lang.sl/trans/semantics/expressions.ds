module trans/semantics/expressions

imports
  ds-signatures/Common-sig
  trans/semantics/desugared-sig
  trans/semantics/values
  trans/semantics/natives/bigint-arithmetics
  trans/semantics/library/booleans

signature
  native operators
    concatS: String * String -> String
  
  native operators
    v2s : V -> String

rules

  VarRead(name) --> lookup(name)
  
  VarWrite(name, v) --> write(name, v)
  
  Int(s) --> NumV(s)
  
  Add(NumV(i1), NumV(i2)) --> NumV(addN(i1, i2))
  
  Add(v1@StringV(_), v2) --> StringV(concatS(v2s(v1), v2s(v2)))
  
  Add(v1, v2@StringV(_)) --> StringV(concatS(v2s(v1), v2s(v2)))
  
  Sub(NumV(i1), NumV(i2)) --> NumV(subN(i1, i2))
  Mul(NumV(i1), NumV(i2)) --> NumV(mulN(i1, i2))
  Div(NumV(i1), NumV(i2)) --> NumV(divN(i1, i2))
  
  String(s) --> StringV(s)
  
  True() --> BoolV(true)
  False() --> BoolV(false)
  
  Eq(v1, v2) --> BoolV(eqT(v1, v2))
  
  Neq(e1, e2) --> Not(Eq(e1, e2))
  
  Lte(NumV(i1), NumV(i2)) --> BoolV(lteN(i1, i2))
  
  Lt(NumV(i1), NumV(i2)) --> BoolV(ltN(i1, i2))
  
  Gte(NumV(i1), NumV(i2)) --> BoolV(lteN(i2, i1))
  
  Gt(NumV(i1), NumV(i2)) --> BoolV(ltN(i2, i1))
  
  And(BoolV(b1), BoolV(b2)) --> BoolV(andB(b1, b2))
  Or(BoolV(b1), BoolV(b2)) --> BoolV(orB(b1, b2))
  Not(BoolV(b)) --> BoolV(notB(b))
  
  
  
